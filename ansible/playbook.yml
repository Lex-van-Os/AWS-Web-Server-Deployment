- name: EC2 Web Server configuration
  hosts: ec2_web_server
  vars_files:
    - vars.yml

  tasks:
    - name: Ping Server
      ansible.builtin.ping:

    - name: Ensure "{{ app_group }}" group exists
      ansible.builtin.group:
        name: "{{ app_group }}"
        state: present
      become: true

    - name: Ensure "{{ app_user }}" user exists
      ansible.builtin.user:
        name: "{{ app_user }}"
        group: "{{ app_group }}"
        createhome: yes
        shell: /bin/bash
        state: present
      become: true

    - name: Set up sudoers for "{{ app_user }}" user (if needed)
      ansible.builtin.copy:
        dest: /etc/sudoers.d/{{ app_user }}
        content: "{{ app_user }} ALL=(ALL) NOPASSWD:ALL"
        mode: "0440"
      when: need_sudo_access

    - name: Install Python dependencies
      ansible.builtin.apt:
        name:
          - python3
          - python3-pip
          - python3-venv
          - supervisor
        state: present
        # when: python_version.rc != 0
        update_cache: yes # Same as running apt-get update
      become: true

    - name: Install Nginx
      ansible.builtin.apt:
        name: nginx
        state: present
        update_cache: yes
      become: true

    - name: Install Git
      ansible.builtin.apt:
        name: git
        state: present
        update_cache: yes
      become: true

    - name: Create project repository to clone to
      ansible.builtin.file:
        path: /var/www/AWS-Web-Server-Deployment
        state: directory
        mode: "0755"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
      become: true

    - name: Mark /var/www/AWS-Web-Server-Deployment as a safe directory for Git
      ansible.builtin.command: git config --global --add safe.directory /var/www/AWS-Web-Server-Deployment
      become: true

    - name: Clone Flask application repository
      ansible.builtin.git:
        repo: https://github.com/Lex-van-Os/AWS-Web-Server-Deployment.git
        dest: /var/www/AWS-Web-Server-Deployment
      # become: true
      # become_user: "{{ app_user }}"

    # - name: Change ownership of project directory
    #   ansible.builtin.file:
    #     path: /var/www/AWS-Web-Server-Deployment
    #     recurse: yes
    #     owner: "{{ app_user }}"
    #     group: "{{ app_group }}"
    #   become: true

    # - name: Change permissions of project directory
    #   ansible.builtin.file:
    #     path: /var/www/AWS-Web-Server-Deployment
    #     recurse: yes
    #     mode: "0755"
    #   become: true

    - name: Create Python virtual environment
      ansible.builtin.command:
        cmd: python3 -m venv /var/www/AWS-Web-Server-Deployment/web/web-app-env
        creates: /var/www/AWS-Web-Server-Deployment/web/web-app-env
      become: true
      become_user: "{{ app_user }}"

    - name: Install Pip packages
      ansible.builtin.pip:
        requirements: /var/www/AWS-Web-Server-Deployment/web/requirements.txt
        virtualenv: /var/www/AWS-Web-Server-Deployment/web/web-app-env
      become: true
      become_user: "{{ app_user }}"

    - name: Create Supervisor configuration file
      ansible.builtin.template:
        src: /var/www/AWS-Web-Server-Deployment/web/supervisor/flask-app.conf.j2
        dest: /etc/supervisor/conf.d/flask-app.conf
        mode: "0644" # File permissions on the server
      notify: Restart Supervisor

    - name: Deploy Nginx configuration from template file
      ansible.builtin.template:
        src: /var/www/AWS-Web-Server-Deployment/web/nginx/flask-app.conf.j2
        dest: /etc/nginx/sites-available/flask-app.conf
        mode: "0644"
      notify: Reload Nginx

    - name: Create symbolic link to Nginx configuration
      ansible.builtin.file:
        src: /etc/nginx/sites-available/flask-app.conf
        dest: /etc/nginx/sites-enabled/flask-app.conf
        state: link

    - name: Remove default Nginx site
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled/default
        state: absent
        force: yes

    - name: Wait for Flask application to start
      ansible.builtin.wait_for:
        host: localhost
        port: 80
        delay: 10
        timeout: 300
        state: started

    - name: Test Flask application
      ansible.builtin.uri:
        url: http://localhost/
        return_content: true
        status_code: 200

  handlers:
    - name: Restart Supervisor
      ansible.builtin.service:
        name: supervisor
        state: restarted
      become: true

    - name: Reload Nginx
      ansible.builtin.service:
        name: nginx
        state: reloaded
      become: true
# TODO:
# Creation of user + group, for Supervisor configuration
# Make Supervisor configuration dynamic using Jinja2 template
# Test / finetune entire Playbook
# Automate the entire project flow with script(s) for Terraform, Ansible, deployment, etc.
# Possible user variable definition for Flask application configuration
# Documentation (NGINGX, Supervisor, WSGI, Flask, etc.)
# Think about how to access the server and Flask application from own PC (EC2 SSH)

# Necessary for Python Flask application configuration
# Python3 installation in case not installed
# Pip installation
# Clone repository of Flask application on EC2
# Flask installation
# Nginx installation(?)
# Nginx configuration(?)
# Flask application deployment
# Flask application validation
