- name: EC2 Web Server configuration
  hosts: ec2_web_server

  vars:
    flask_app_port: 80
    flask_app_domain_name: ec2-web-app.example.com

  tasks:
    - name: Ping Server
      ansible.builtin.ping:
      check_mode: false

    - name: Ensure 'flaskapp' group exists
      ansible.builtin.group:
        name: flaskapp
        state: present

    - name: Ensure 'flaskapp' user exists
      ansible.builtin.user:
        name: flaskapp
        group: flaskapp
        createhome: yes
        shell: /bin/bash
        state: present

    - name: Set up sudoers for flaskapp user (if needed)
      ansible.builtin.copy:
        dest: /etc/sudoers.d/flaskapp
        content: "flaskapp ALL=(ALL) NOPASSWD:ALL"
        mode: "0440"
      when: need_sudo_access

    - name: Install Python dependencies
      ansible.builtin.apt:
        name:
          - python3
          - python3-pip
          - python3-venv
          - supervisor
        state: present
        # when: python_version.rc != 0
        update_cache: yes # Same as running apt-get update
        check_mode: true

    - name: Install Nginx
      ansible.builtin.apt:
        name: Nginx
        state: present
        update_cache: yes
        check_mode: true

    - name: Install Git
      ansible.builtin.apt:
        name: git
        state: present
        update_cache: yes
        check_mode: true

    - name: Clone Flask application repository
      ansible.builtin.git:
        repo: https://github.com/Lex-van-Os/AWS-Web-Server-Deployment.git
        dest: /home/ubuntu/AWS-Web-Server-Deployment # Verify this path
        state: present
        check_mode: true

    - name: Create Python virtual environment
      ansible.builtin.command: python3 -m venv /home/ubuntu/AWS-Web-Server-Deployment/web/web-app-env
      args:
        creates: /home/ubuntu/AWS-Web-Server-Deployment/web/web-app-env
      check_mode: true

    - name: Activate Python virtual environment
      ansible.builtin.command: source /home/ubuntu/AWS-Web-Server-Deployment/web/web-app-env/bin/activate
      check_mode: true

    - name: Install Pip packages
      ansible.builtin.pip:
        requirements: /home/ubuntu/AWS-Web-Server-Deployment/web/requirements.txt
        virtualenv: /home/ubuntu/AWS-Web-Server-Deployment/web/web-app-env
        check_mode: true

    - name: Create Supervisor configuration file
      ansible.builtin.template:
        src: /home/ubuntu/AWS-Web-Server-Deployment/web/supervisor/flask-app.conf.j2
        dest: /etc/supervisor/conf.d/flask-app.conf
        state: present
        check_mode: true
        mode: "0644"

    - name: Restart Supervisor service
      ansible.builtin.service:
        name: supervisor
        state: restarted
        check_mode: true

    - name: Deploy Nginx configuration from template file
      ansible.builtin.template:
        src: /home/ubuntu/AWS-Web-Server-Deployment/web/nginx/flask-app.conf.j2
        dest: /etc/nginx/sites-available/flask-app.conf
        state: present
        check_mode: true
        mode: "0644" # File permissions on the server

    - name: Create symbolic link to Nginx configuration
      ansible.builtin.file:
        src: /etc/nginx/sites-available/flask-app.conf
        dest: /etc/nginx/sites-enabled/flask-app.conf
        state: link
        check_mode: true

    - name: Remove default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
        force: yes

    - name: Reload Nginx
      ansible.builtin.service:
        name: nginx
        state: reloaded
        check_mode: true
# TODO:
# Creation of user + group, for Supervisor configuration
# Make Supervisor configuration dynamic using Jinja2 template
# Test / finetune entire Playbook
# Automate the entire project flow with script(s) for Terraform, Ansible, deployment, etc.
# Possible user variable definition for Flask application configuration
# Documentation (NGINGX, Supervisor, WSGI, Flask, etc.)
# Think about how to access the server and Flask application from own PC (EC2 SSH)

# Necessary for Python Flask application configuration
# Python3 installation in case not installed
# Pip installation
# Clone repository of Flask application on EC2
# Flask installation
# Nginx installation(?)
# Nginx configuration(?)
# Flask application deployment
# Flask application validation
